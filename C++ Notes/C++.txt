Unit - 01 : Constructor and Destructor 

* Constructor :- 
 	In C++ It is a special member function of class , whose task is to initialize the object of its class.

* Types of Constructor :- 
1)  Default constructor  : - A constructor that accept no parameter is called default constructor.
2) Parameterized Constructor :- A constructor than can take argument is called as parameterzed constructor.
3) Copy constructor :- A constructor that intializes an object using value of another object passed to its parameter
			is called as copy constructor.

* Overloaded Constructor in a class :-
	More than one constructor is defined in a class it is called as overloaded constructor just like a function overloading.

* Constructor With defualt Argument :-
	A constructor is the special member function can support default value hence simply we say that the constructor 
	is called as constructor with default Argument...


* Destructor :- 
	a destructor is a special member function of class are used to destriy the object of that have been created.
a destructor is special member function of class that is executed whenever an object goes out of scope destructor
automatically remove or delete from the memory workspace occupied by the object....


* characterstics of destructor :- 
1) it is used to destroy the object memory workspace occupied by the object.
2) Destructor neither take any argument nor it returns any value.
3) Destructor cannot be overloaded.
4) name is the same as the class name but prefixed the (~)tilde .
5) it have not return any value. not even void.
6) it is automatically called when object goes out scope.

Example :-
#include<iostream>
using namespace std;
class test{
public:
 test(){
cout<<"Constructor is invoked"<<endl;
}
~test(){
cout<<"Destructor is invoked"<<endl;
}
};
int main(){
test t;
return 0;
}

Unit - 02 : Inheritance and Extending Classes

* Inheritance :-
the mechanism of deriving new class from sn existing one class is called as inheritance.

Types of inheritance :-

1) Single Inheritance :- if derived class is inherited to one its base class is called single inheritance.
2) Multi-Level Inheritance :- if a derived class is inherited to another derived class this process is called as multilevel inheritance.
3) Multiple Inheritance :- if a derived class is inherited to more than one base class is called as multiple inheritance.
4) Heirarchical Inheritance :- if a one base class is inhertied to the more than one derived class is called as heirarchical inheritance.
5) Hybrid Inheritance :- in which a combination of more than one type of inheritance is called as hybrid inheritance.


Access Specifier :-
1) public :- if a member is public, it can used by any function.
2) private :- if a member is private, it can access ony the inside the class
3) protected :- if a member is protected it can only member function & friend function can access this.


* Derived class constructor :- 
	when a class is derived from another base class, it is possible to define constructor in derived class and 
	and data member of both the classes can be inherited....

* Benifits of inheritance :-
1) it provides guarantee that the behaviour they inherit will be the same in all cases. when multiple classes inherit from the same super class.
2) inheritance allows to the construction of resusable software components.
3) avoided code resusability.
4) it improves code organization and program reusability.
5) due to reusable code, reduce effort and maintainance cost.
6) it also provides extensibility and data hiding ability and overriding.


* this Pointer :-
every object of class it own address through an important pointer called as this pointer.
	the pointer contain the address of object such pointer is called as this pointer...
	it holds the current address of object.

Advantages of this pointer :-
1. constructor or function parameter and class data member readable.
2. this pointer is an implicit parameter to call member functions

* Characterstics of this pointer :-
1. it is an implicit pointer used by the system.
2. it stores the address of the current object in reference.
3. it is a constant pointer to an object.
4. it can only be used within non static functions of the class
5. this pointer is non modifiable assignment to this are not followed.

#include<iostream>
using namespace std;
class test{
public:
int a=10;
test(int a){
this->a = a;
}
};
int main(){
test t;
return 0;
}

* Virtual Function :-
a function in which same sinature function in base and derived class , virtual function gives programmer capability to call
member function of different class by a same function call depending upon different context, 
on runtime polymorphism. to get late binding use vitual function.....

	A vitual function is a member function that is declared within the base class and redefined by a derived class.
	in order ti create a virtual function, the keyword virtual is  used preceding the function decleration.
for syntax is, 
	class class_name{
public:
	vitual return_type function_name(argument){
	//function body..
	}};

* Pure Virtual Function :- 
	in such situation base class supplies only the prototype of the virtual function and the implication is that
	any derived class override this function. 
	when we define function in a base class and redefined in the derived class, so the base class function is called as do-nothing function
	this function is called as pure virtual function...

* Abstract Class :-
	it is defined as, when class is contains a at least one pure virtual function this class is called as abstract class...
	Syntax :- vitual return_type function_name = 0;


Unit - 03 : Exception Handeling 

Exception :-
	Exception are some situation that have we must avoided during execution .
the run time error is also known as exception.or it is runtime abnormalities.

* Exception Handeling Mechanism :-it is a useful for procesing problems that occur when a program interacts with software elements like member functions,
constructors, destructors and classes.

 There are mainly two types of Exceptions :- 
1) synchronous exception :- out of range
2) Asynchronous exception :- out of control for system

* Mechanism of Exception :-
1) Identify the problem.
2) declare that exception has arrived
3) collect the error information 
4) take corrective activities.


* Concept of Try, Catch and Throw ;-
	exception mechanism based upon the  three keywords such namely as, try, throw & catch. the reserve word try is used to introducve the block of statement that may create
exception. we name it is as try bolck when exception is identified. it is thrown using throw statement in try block. the reserve word catch defines catch block catches the exception
thrown by throw sratement in try block and handles it properly.


1) Throw :- we can raise the exception by using the throw keyword when computation error is encountered. the expression of throw initializes a temporary object of type T.
Syntax :- Throw  T;

2) Catch :- to handle the exception we need to use catch keyword. it is immediately used after the statement marked by try block. a catch ma ccur immediately after another catch.
the exception must be handled by catch or casted to the type specified in the argument list.
syntax :- Catch(T)
{
//steps of handeling the exceptions.
}

3) Try :- the area in which exceptio is occured is defined by try keyword. a section of program  where exception can occurs must be prefixed by try
this make our program t check for existances of exception....

Example :- 
#include<iostream>
using namespace std;

int divison(int a, int b){
if(b==0){
throw "Exception is Occured..!!";
}
else{
return a/b;
}
}


int main(){
int a=10;
int b-0;
int c;

try{
c=divison(a,b);
cout<<c<<endl;
}
catch(const char *msg){
cerr<<msg<<endl;
}
return 0;

}
* Throwing mechanism :- 
throw(exception);
throw exception;
throw;// option for re-throwing exception
when you throw exception it will be catched by catch associated with the try block that is the control exists in 
current try block and transfer to catch block afterwards.


* Catching mechanism with multiple catches :-
	if program has to evaluate more than one condition to throw exception then we need to associated multiple catches with try block..
try{
//try block
}
catch(type1 argument){
//block#1 of catch
}

catch(N argument){
//block #n of catch
}

* Standard Libraty Exception heirarchy :-
the general overview of standard exception mechanism is :
1) Exception thrown are objects of classes
2) Exception classes are derived from common base.
3) polymorphic members that are supported by base class describe exception to run time system.




Unit - 04 : Templates and Introduction to Standard Template Library 

* Template :- it is special technique in c++. it is permits you to write generic programs. in way you can create a function or class to work with different data types using template.

Two Types of Templates :-
1) Function Template
2) Class Template


Function Template :- it like a normal function but only one key difference to in which we can work with different types of data. such technique is called as function template..
class template :- it is like a normal only one key difference to in which we can works with different type of data . such techonique is called as class template 

in which we can template keyword and template parameters inside < > .
in function template we can also use a one keyword 'typename'
in class template we can use the 'class' keyword..

function template syntax:-
template<typename T>
T somefunction(T arg1, T arg2){
return arg1+arg2;
}

class template syntax :-
template <class T>
class demo{
public:
T var;
T SomeFunction(T Var){
return var;
}
};
int main(){
demo<int>d1;
return 0;
}


* Components of STL :-
1) Algorithm :- it is a collection of functions especially designed to be used on range of elements.. algorithm,searching,sorting,imp stl algo.
2) Containers :- it is a object and data. there are three types of classes sequence container, associative container, derived container.
3) Iterators :- iterators are the pointers used to access invidual elements. iterators are moved sequentially from one element to another element 
4) Functions :- it is function wrapped in a class so that it looks like an object.it is also known as functor. it is contain at least one defination of operator() function.

Example :-
#include<iostream>
using namespace std;
class Function_Object{
public:
int operator(int a, int b){
return a+b;
}
};
int main(){
Function_Object f;
int result = f(5,4);
cout<<result<<endl;
return 0;
}


Unit - 05 : Working With Files 

File :- file are the collection of related data stored in a particular area on the disk.
			      ios
	istream 		strambuf 		ostream
			iostream
	ifstream				ofstream		filebuf
			fstream

1) filebuf
2) fstreambase
3) ifstream
4) ofstream
5) fstream



File modes in c++ :-
the ifstream and ofstream constructors and the function open() are used to oen the files.
the general form of open() with two arguments is :-
	stream - object.open("filename",mode);

the list of file modes :-
1)ios :: app :- appending to end of file
2)ios :: ate :-  go to end of file opening
3)ios :: binary :- binary file
4)ios :: in  :- open file for reading only
5)ios :: nocreate :- open fails if file does not exist
6)ios :: noreplace :- open fails if file already exist
7)ios :: out :- open file for only writing
8)ios :: trunck  :- delete the content of file if file exist.


* File Input / Output with fstrem Class :-
1) ofstream :-stream class to write on files.
2) ifstream :- stream class to read from the file.
3) fstream :- stream class to both read and write from file.

			

																																																																																																																																																																											 											